import typescriptEslint from '@typescript-eslint/eslint-plugin';
import prettierPlugin from 'eslint-plugin-prettier';
import * as prettier from "eslint-config-prettier";
import importPlugin from 'eslint-plugin-import';
import typescriptParser from '@typescript-eslint/parser';
import globals from "globals";

export default [
  {
    files: ["**/*.{ts,tsx}"],
    plugins: {
      '@typescript-eslint': typescriptEslint,
      prettier: prettierPlugin,
      import: importPlugin,
    },
    rules: {
      ...prettier.rules,
      "prettier/prettier": "error",
      "consistent-return": "warn",
      "array-bracket-newline": ["warn", { multiline: true }],
      "array-bracket-spacing": ["warn", "never"],
      "array-element-newline": ["warn", "consistent"],
      "no-nested-ternary": "warn",
      eqeqeq: "off",
      "no-shadow": "off",
      "new-cap": "warn",
      "import/extensions": 0,
      "import/no-unresolved": 0,
      "import/no-default-export": "error",
      "no-restricted-imports": [
        "error",
        {
          patterns: ["~/*", "../*"],
        },
      ],
      curly: ["error", "all"],
      "padding-line-between-statements": [
        "error",
        { blankLine: "always", prev: "*", next: "return" },
        { blankLine: "always", prev: "*", next: "try" },
        { blankLine: "always", prev: "*", next: "multiline-expression" },
        { blankLine: "always", prev: "*", next: "if" },
        { blankLine: "always", prev: "*", next: "export" },
      ],
      "@typescript-eslint/explicit-function-return-type": [
        "error",
        {
          allowExpressions: true,
          allowTypedFunctionExpressions: true,
        },
      ],
      "@typescript-eslint/no-unsafe-call": "warn",
      "@typescript-eslint/no-unsafe-assignment": "warn",
      "@typescript-eslint/no-unsafe-argument": "warn",
      "@typescript-eslint/no-unsafe-member-access": "warn",
      "@typescript-eslint/no-unsafe-return": "warn",
      "@typescript-eslint/no-shadow": "warn",
      "@typescript-eslint/no-dynamic-delete": "warn",
      "@typescript-eslint/require-await": "off",
      "@typescript-eslint/restrict-template-expressions": "off",
      "@typescript-eslint/prefer-nullish-coalescing": "warn",
      "@typescript-eslint/no-floating-promises": "off",
      "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
      "@typescript-eslint/naming-convention": [
        "error",
        {
          selector: ["variable", "typeProperty"],
          types: ["boolean"],
          format: ["PascalCase"],
          prefix: ["is", "should", "has", "can", "did", "will", "must"],
        },
        {
          selector: ["variable", "typeProperty"],
          types: ["array"],
          format: ["camelCase"],
          suffix: ["List"],
        },
        {
          selector: "interface",
          format: ["PascalCase"],
          prefix: ["I"],
          filter: {
            regex: "^I[A-Z]",
            match: false,
          },
        },
        {
          selector: "enum",
          format: ["PascalCase"],
          suffix: ["Enum"],
        },
        {
          selector: "enumMember",
          format: ["UPPER_CASE"],
        },
      ],
    },
    languageOptions: {
      parser: typescriptParser,
      parserOptions: {
        project: "./tsconfig.json",
        ecmaVersion: "latest",
        sourceType: "module",
      },
    },
    ignores: [
      "eslint.config.js",
      "*~",
      ".fuse_hidden*",
      ".directory",
      ".Trash-*",
      ".nfs*",
      ".DS_Store",
      ".AppleDouble",
      ".LSOverride",
      "Icon",
      "._*",
      ".DocumentRevisions-V100",
      ".fseventsd",
      ".Spotlight-V100",
      ".TemporaryIItems",
      ".Trashes",
      ".VolumeIcon.icns",
      ".com.apple.timemachine.donotpresent",
      ".AppleDB",
      ".AppleDesktop",
      "Network Trash Folder",
      "Temporary IItems",
      ".apdisk",
      "*.icloud",
      "logs",
      "*.log",
      "npm-debug.log*",
      "yarn-debug.log*",
      "yarn-error.log*",
      "lerna-debug.log*",
      ".pnpm-debug.log*",
      "report.*.json",
      "pids",
      "*.pid",
      "*.seed",
      "*.pid.lock",
      "lib-cov",
      "coverage",
      "*.lcov",
      ".nyc_output",
      ".grunt",
      "bower_components",
      ".lock-wscript",
      "build/Release",
      "node_modules/",
      "jspm_packages/",
      "web_modules/",
      "*.tsbuildinfo",
      ".npm",
      ".eslintcache",
      ".stylelintcache",
      ".rpt2_cache/",
      ".rts2_cache_cjs/",
      ".rts2_cache_es/",
      ".rts2_cache_umd/",
      ".node_repl_history",
      "*.tgz",
      ".yarn-integrity",
      ".env",
      ".env.*.local",
      ".env.local",
      ".cache",
      ".parcel-cache",
      ".next",
      "out",
      ".nuxt",
      "dist",
      ".cache/",
      ".vuepress/dist",
      ".temp",
      ".docusaurus",
      ".serverless/",
      ".fusebox/",
      ".dynamodb/",
      ".tern-port",
      ".vscode-test",
      ".yarn/cache",
      ".yarn/unplugged",
      ".yarn/build-state.yml",
      ".yarn/install-state.gz",
      ".pnp.*",
      ".webpack/",
      ".svelte-kit",
      ".DS_*",
      "**/*.backup.*",
      "**/*.back.*",
      "*.sublime*",
      "psd",
      "thumb",
      "sketch",
      "Thumbs.db",
      "Thumbs.db:encryptable",
      "ehthumbs.db",
      "ehthumbs_vista.db",
      "*.stackdump",
      "[Dd]esktop.ini",
      "$RECYCLE.BIN/",
      "*.cab",
      "*.msi",
      "*.msix",
      "*.msm",
      "*.msp",
      "*.lnk",
      ".nx/cache",
      ".nx/workspace-data",
      "*.iws",
      ".idea/**/workspace.xml",
      ".idea/**/tasks.xml",
      ".idea/**/usage.statistics.xml",
      ".idea/**/dictionaries",
      ".idea/**/shelf",
      ".idea/sonarlint/",
      ".idea/**/sonarlint/",
      ".idea/**/sonarIssues.xml",
      "**/.react-router/**",
      "build",
    ],
  },

  // Fichier de config Node
  {
    files: ["eslint.config.js"],
    languageOptions: {
      globals: globals.node,
    },
  },
  // Exclude specific files from TypeScript rules
  {
    files: ["src/queries/**/*.interface.ts"],
    rules: {
      "@typescript-eslint/naming-convention": "off"
    }
  },
];
